Проект takeeg

Архитектура

Термины

* client - экземпляр ПО на устройстве пользователя выполняющий роль клиента
* server - экземпляр ПО на устройстве имеющем бОльший аптайм и выполняющий роль "посредника" между клиентами
* client private key (CPrK) - приватный ключ клиента
* client public key (CPubK)- публичный ключ клиента
* identity card (IC) - публичный ключ и совокупность информации о клиенте подписанное его приватным ключем (ЭЦП)
* acquainted client (AC) - клиент identity card которого сохранена на текущем клиенте
* clients acquaintance (CA) - процесс обмена клиентов их identity card
* stream id (SI) - идентификатор потока (скорее всего UUID)

Требования

* публикация на server информации о адресах текущего client (ipv4, ipv6, доменное имя, возможно адреса bluetooth и анонимных децентрализованных сетей)
* сохранение на server списка acquainted client (не acquainted client не может получить информацию о адресах клиента)
* clients acquaintance: достоверная передача identity card с одного client на другой не допуская возможных MitM атак 
** по NFC
** упаковка identity card в qr-code (надо определить размер, возможно поместится только списко адресов и отпечаток публичного ключа)
** вручную (через файл или e-mail) c обязательной возможностью проверить client public key fingeprint
** через поиск на сервере по неким критериям (так же с проверкой fingeprint)
* передача произвольных сообщений (в т.ч. произвольного размера) между различными client через шифрованное соединение
* заложить возможность 
** передачи сообщений через server (не дешифруя трафик, но исключая потенциальные атаки с использованием сервера)
** конференций - передачи сообщени одновременно между несколькими client, желательно исключая сервер
* хранение списка acquainted client на client
* аутентификация на server по своему ключу
* отправка сообщений всем устройствам пользователя
* позже
** гибкая настройка действий на приходящие сообщения (в зависимости от групп в которые входит источник сообщения, его адреса и т.п.)
** опциональное шифрование данных хранящихся на client

Действия

client 
- при запуске
  - проверяет наличие приватного ключа в формате PKCS12
    - если его нет, то предоставялет пользователю возможность создать такой или загрузить в хранилище программы существующий
  - запрашивает пароль для приватного ключа (если требуется)
    _пароль может быть графическим или иным, надо разобраться что используется для этого на мобильниках_
    пароль можно созранять на устройстве по желанию пользователя (для андроида есть некий механизм аккаунтов стоит посмотреть что там)
  - загружает из настроек список server-ов
  - публикует на каждом server список своих адресов
- при отправке сообщения
  - определяет размер пакета данных
  - определяет возможность соединения
  - отправка
   - если размер пригоден для одного пакета то отправляет его в UDP одним пакетом (N-раз если не получено подтверждение)
   - иначе отправляет запрос на установку соединения
   - устанавливает tcp соединение
   - помещает в него данные

типы коротких сообщений (передаются в TCP потоке или UDP)
TODO формат сообщений MessagePack (нмв. перегружен) или ASN.1

* публикация адреса клиента на сервере (имеет смысл после публикации identity card)
* публикация identity card клиента на сервере
* отправка своего публичного ключа другому клиенту (как обеспечить достоверность?) 
* отправка данных клиенту  - сообщение содержит набора аттрибутов каждый состоит из идентификатора, типа и данных
  в зависимости от типа аттрибут может содержать mime-тип, размер, идентификатор потока)
* запрос на установку с клиентом tcp соединения (имеет смысл только если работа ведется на UDP протоколе)
* запрос потока (для тех случаев когда пользователь подтвердил прием потока клиент отправляет этот запрос с идентификатором потока)
* короткое сообщение (по UDP)
* подтверждение приема (по UDP)